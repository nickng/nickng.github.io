<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Process Calculi on Nicholas Ng</title>
    <link>http://www.nickng.io/tags/process-calculi/index.xml</link>
    <description>Recent content in Process Calculi on Nicholas Ng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <atom:link href="http://www.nickng.io/tags/process-calculi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go concurrency verification</title>
      <link>http://www.nickng.io/projects/golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.nickng.io/projects/golang/</guid>
      <description>

&lt;p&gt;The aim of this line of work is to verify channel-based concurrency interaction
in &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; using techniques from the research area of
&lt;a href=&#34;https://en.wikipedia.org/wiki/Process_calculus&#34;&gt;process calculi&lt;/a&gt; and
&lt;a href=&#34;https://en.wikipedia.org/wiki/Type_system&#34;&gt;type systems&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nickng/dingo-hunter&#34;&gt;nickng/dingo-hunter&lt;/a&gt; is a static
analyser for Go based on the &lt;a href=&#34;http://golang.org/x/tools/go/ssa&#34;&gt;go/ssa&lt;/a&gt; package
from the Go project. The tool itself is designed to be an interface to Go
programs, performing type inference/model extraction from Go code. Current
analysis frontends include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communicating Finite State Machines (&lt;a href=&#34;https://github.com/nickng/cfsm&#34;&gt;CFSMs&lt;/a&gt;)
modelling goroutines.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;mi&lt;/strong&gt;ni &lt;strong&gt;Go&lt;/strong&gt; process calculi/type system
(&lt;a href=&#34;https://github.com/nickng/migo&#34;&gt;MiGo&lt;/a&gt;) as a high level, communication-only
abstraction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;publications&#34;&gt;Publications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mrg.doc.ic.ac.uk/publications/static-deadlock-detection-for-concurrent-go-by-global-session-graph-synthesis/&#34;&gt;Static Deadlock Detection for Concurrent Go by Global Session Graph
Synthesis&lt;/a&gt; uses the CFSMs synthesis approach.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mrg.doc.ic.ac.uk/publications/fencing-off-go-liveness-and-safety-for-channel-based-programming/&#34;&gt;Fencing off Go: Liveness and Safety for Channel-based Programming&lt;/a&gt;
uses the MiGo approach.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>async-π</title>
      <link>http://www.nickng.io/projects/asyncpi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.nickng.io/projects/asyncpi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/nickng/asyncpi&#34;&gt;nickng/asyncpi&lt;/a&gt; is a mini-language modelled
after the asynchronous π-calculus implemented in Go intended to be used as a
teaching language.&lt;/p&gt;

&lt;p&gt;The basic syntax is given below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;P,Q ::= 0           nil process
      | P|Q         parallel composition of P and Q
      | (new a)P    generation of a with scope P
      | !P          replication of P, infinite parallel composition  P|P|P...
      | u&amp;lt;v&amp;gt;        output of v on channel u
      | u(x).P      input of distinct variables x on u, with continuation P
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/github.com/nickng/asyncpi&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/nickng/asyncpi?status.svg&#34; alt=&#34;GoDoc&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>