<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Process Calculi on Nicholas Ng</title>
    <link>http://www.nickng.io/tags/process-calculi/</link>
    <description>Recent content in Process Calculi on Nicholas Ng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    
	<atom:link href="http://www.nickng.io/tags/process-calculi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go concurrency verification</title>
      <link>http://www.nickng.io/projects/golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.nickng.io/projects/golang/</guid>
      <description>The aim of this line of work is to verify channel-based concurrency interaction in Go using techniques from the research area of process calculi and type systems. This is a joint work with Bernardo Toninho, Julien Lange and Nobuko Yoshida.
Tools nickng/dingo-hunter is a static analyser for Go based on the go/ssa package from the Go project. The tool itself is designed to be an interface to Go programs, performing type inference/model extraction from Go code.</description>
    </item>
    
    <item>
      <title>async-π</title>
      <link>http://www.nickng.io/projects/asyncpi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.nickng.io/projects/asyncpi/</guid>
      <description>nickng/asyncpi is a mini-language modelled after the asynchronous π-calculus implemented in Go intended to be used as a teaching language.
The basic syntax is given below:
P,Q ::= 0 nil process | P|Q parallel composition of P and Q | (new a)P generation of a with scope P | !P replication of P, infinite parallel composition P|P|P... | u&amp;lt;v&amp;gt; output of v on channel u | u(x).P input of distinct variables x on u, with continuation P</description>
    </item>
    
  </channel>
</rss>